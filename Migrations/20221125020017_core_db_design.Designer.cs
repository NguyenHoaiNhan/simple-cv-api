// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleCV.Data.DataContext.EF;

#nullable disable

namespace simple_cv.Migrations
{
    [DbContext(typeof(PgDbContext))]
    [Migration("20221125020017_core_db_design")]
    partial class core_db_design
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimpleCV.Data.Entities.Activity", b =>
                {
                    b.Property<int>("ActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("act_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActId"));

                    b.Property<string>("ActivityType")
                        .HasColumnType("text")
                        .HasColumnName("activity_type");

                    b.Property<int>("CVid")
                        .HasColumnType("integer")
                        .HasColumnName("cv_id");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Organization")
                        .HasColumnType("text")
                        .HasColumnName("organization");

                    b.Property<string>("Position")
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("ActId");

                    b.HasIndex("CVid");

                    b.ToTable("activity", (string)null);
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.CV", b =>
                {
                    b.Property<int>("CVId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cv_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CVId"));

                    b.Property<string>("CVUrl")
                        .HasColumnType("text")
                        .HasColumnName("cv_url");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.HasKey("CVId");

                    b.ToTable("cv", (string)null);
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.CVSkill", b =>
                {
                    b.Property<int>("CVId")
                        .HasColumnType("integer")
                        .HasColumnName("cv_id");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer")
                        .HasColumnName("skill_id");

                    b.Property<int?>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.HasKey("CVId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("cv_skill", (string)null);
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.Description", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("integer")
                        .HasColumnName("act_id");

                    b.Property<int?>("Alignment")
                        .HasColumnType("integer")
                        .HasColumnName("alignment");

                    b.Property<int?>("BulletType")
                        .HasColumnType("integer")
                        .HasColumnName("bullet_type");

                    b.Property<string>("DescriptionPara")
                        .HasColumnType("text")
                        .HasColumnName("description_paragraph");

                    b.Property<bool?>("IsBold")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bold");

                    b.Property<bool?>("IsItalic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_italic");

                    b.Property<bool?>("IsUnderline")
                        .HasColumnType("boolean")
                        .HasColumnName("is_underline");

                    b.HasKey("ActivityId");

                    b.ToTable("description", (string)null);
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.Info", b =>
                {
                    b.Property<int>("CVId")
                        .HasColumnType("integer")
                        .HasColumnName("cv_id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("CivilStatus")
                        .HasColumnType("text")
                        .HasColumnName("civil_status");

                    b.Property<int?>("CivilStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("civil_status_id");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DriverLicense")
                        .HasColumnType("text")
                        .HasColumnName("driver_license");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FamilyName")
                        .HasColumnType("text")
                        .HasColumnName("family_name");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("GithubLink")
                        .HasColumnType("text")
                        .HasColumnName("github_link");

                    b.Property<string>("GivenName")
                        .HasColumnType("text")
                        .HasColumnName("given_name");

                    b.Property<string>("HeadLine")
                        .HasColumnType("text")
                        .HasColumnName("headline");

                    b.Property<string>("InfoTitle")
                        .HasColumnType("text")
                        .HasColumnName("info_title");

                    b.Property<string>("LinkedinLink")
                        .HasColumnType("text")
                        .HasColumnName("linkedin_link");

                    b.Property<string>("PhoneNum")
                        .HasColumnType("text")
                        .HasColumnName("phone_num");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text")
                        .HasColumnName("place_of_birth");

                    b.Property<string>("PostCode")
                        .HasColumnType("text")
                        .HasColumnName("post_code");

                    b.HasKey("CVId");

                    b.ToTable("info", (string)null);
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("skill_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillId"));

                    b.Property<string>("SkillName")
                        .HasColumnType("text")
                        .HasColumnName("skill_name");

                    b.Property<string>("SkillType")
                        .HasColumnType("text")
                        .HasColumnName("skill_type");

                    b.HasKey("SkillId");

                    b.ToTable("skill", (string)null);
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("MidName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mid_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.Activity", b =>
                {
                    b.HasOne("SimpleCV.Data.Entities.CV", "RefCV")
                        .WithMany("Activities")
                        .HasForeignKey("CVid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefCV");
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.CVSkill", b =>
                {
                    b.HasOne("SimpleCV.Data.Entities.CV", "RefCV")
                        .WithMany("CVSkills")
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleCV.Data.Entities.Skill", "RefSkill")
                        .WithMany("CVSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefCV");

                    b.Navigation("RefSkill");
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.Description", b =>
                {
                    b.HasOne("SimpleCV.Data.Entities.Activity", "RefActivity")
                        .WithOne("RefDescription")
                        .HasForeignKey("SimpleCV.Data.Entities.Description", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefActivity");
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.Info", b =>
                {
                    b.HasOne("SimpleCV.Data.Entities.CV", "RefCV")
                        .WithOne("RefInfo")
                        .HasForeignKey("SimpleCV.Data.Entities.Info", "CVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefCV");
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.Activity", b =>
                {
                    b.Navigation("RefDescription");
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.CV", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("CVSkills");

                    b.Navigation("RefInfo");
                });

            modelBuilder.Entity("SimpleCV.Data.Entities.Skill", b =>
                {
                    b.Navigation("CVSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
